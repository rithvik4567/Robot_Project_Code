Performance Test 3 Code â€“ Hotplate
The code we used for performance test 3 is shown below.

The robot would start once the starting light was activated and would proceed to go up the ramp and approach the hotplate. Then using the same post 
attachment used in the previous performance test with the servo motor, the robot would lift the hotplate up to flip the burger and then let go to have 
the hotplate fall back down. Then the robot would proceed towards the ice cream levers and press a lever down.

#include <FEHLCD.h>
#include <FEHIO.h>
#include <FEHUtility.h>
#include <FEHMotor.h>
#include <FEHRPS.h>
#include <FEHServo.h>
 
//Declarations for encoders & motors
DigitalEncoder right_encoder(FEHIO::P0_0);
DigitalEncoder left_encoder(FEHIO::P1_0);
FEHMotor right_motor(FEHMotor::Motor0,9.0);
FEHMotor left_motor(FEHMotor::Motor1,9.0);
//Declaration for CdS cell
AnalogInputPin lightSensor(FEHIO::P2_0);
//Declaring the servo motor
FEHServo servo(FEHServo::Servo0);
 
 
void move_forward(int percent, int inches) //using encoders
{
//convert inches to counts
int counts = inches * 40.5;
//Reset encoder counts
right_encoder.ResetCounts();
left_encoder.ResetCounts();
 
//Set both motors to desired percent
right_motor.SetPercent(-1 * (percent + 5));
left_motor.SetPercent(percent);
 
//While the average of the left and right encoder is less than counts,
//keep running motors
while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);
 
//Turn off motors
right_motor.Stop();
left_motor.Stop();
}
 
void move_backward(int percent, int inches) //using encoders
{
//convert inches to counts
int counts = inches * 40.5;
//Reset encoder counts
right_encoder.ResetCounts();
left_encoder.ResetCounts();
 
//Set both motors to desired percent
right_motor.SetPercent(percent);
left_motor.SetPercent(-1 * (percent - 5));
 
//While the average of the left and right encoder is less than counts,
//keep running motors
while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);
 
//Turn off motors
right_motor.Stop();
left_motor.Stop();
}
 
void right_only(int percent, int inches) //using encoders
{
//convert inches to counts
int counts = inches * 40.5;
//Reset encoder counts
right_encoder.ResetCounts();
left_encoder.ResetCounts();
 
//Set both motors to desired percent
right_motor.SetPercent(-1 * (percent + 5));
left_motor.SetPercent(0);
 
//While the average of the left and right encoder is less than counts,
//keep running motors
while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);
 
//Turn off motors
right_motor.Stop();
left_motor.Stop();
}
 
void turn_right(int percent, int degrees) //using encoders
{
//Reset encoder counts
right_encoder.ResetCounts();
left_encoder.ResetCounts();
 
//Convert counts to degrees
int counts = (degrees * 225) / 90;
 
//Set both motors to desired percent
//hint: set right motor backwards, left motor forwards
 
right_motor.SetPercent(percent + 5);
left_motor.SetPercent(percent);
 
//While the average of the left and right encoder is less than counts,
//keep running motors
 
while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);
 
 
//Turn off motors
right_motor.Stop();
left_motor.Stop();
}
 
void turn_left(int percent, int degrees) //using encoders
{
//Reset encoder counts
right_encoder.ResetCounts();
left_encoder.ResetCounts();
 
//Convert counts to degrees
int counts = (degrees * 225) / 90;
 
//Set both motors to desired percent
 
right_motor.SetPercent(-1*(percent + 5));
left_motor.SetPercent(-1*percent);
 
//While the average of the left and right encoder is less than counts,
//keep running motors
 
while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);
 
//Turn off motors
right_motor.Stop();
left_motor.Stop();
}
 
void up_ramp(int percent, int inches)
{
//Convert inches to counts
int counts = inches * 40.5;
//Reset encoder counts
right_encoder.ResetCounts();
left_encoder.ResetCounts();
//Set both motors to desired percent
right_motor.SetPercent(-1 * (percent + 10));
left_motor.SetPercent(percent);
//While the average of the left and right encoder is less than counts,
//keep running motors
while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);
//Turn off motors
right_motor.Stop();
left_motor.Stop();
}
 
int main(void)
{
 
//Declaring the variables for the motor power percentages and initializing them
int motor_percent = 25;
int negative_motor_percent = -25;
 
//Setting the min and max values for the servo
servo.SetMin(500);
servo.SetMax(2324);
 
servo.SetDegree(155);
 
while (true){
//Continuously checking to see if the light is turned on
if (lightSensor.Value() < 2.7){
   LCD.Write(lightSensor.Value());
//move forward 17 inches
   move_forward(motor_percent, 15);
//turn right 53 degrees
   Sleep(0.25);
   turn_right(motor_percent, 50);
   //move forward 2 inches
   move_forward(motor_percent, 2);
//go forward up the ramp
   up_ramp(motor_percent,21);
   turn_right(motor_percent, 17);
   Sleep(1.0);
   servo.SetDegree(25);
   move_forward(motor_percent, 16);
   Sleep(2.0);
   servo.SetDegree(60);
   Sleep(1.0);
   move_forward(motor_percent, 2);
   Sleep(1.0);
   turn_right(motor_percent, 10);
   Sleep(1.0);
   servo.SetDegree(80);
   Sleep(2.0);
   turn_right(motor_percent, 20);
   turn_left(motor_percent, 118);
  /*move_backward(motor_percent, 4);
   turn_right(motor_percent, 75);
   move_forward(motor_percent, 5);
   turn_left(motor_percent, 140);*/
   servo.SetDegree(100);
   move_forward(motor_percent, 5);
   while (true){
       Sleep(1.0);
       servo.SetDegree(50);
       Sleep(1.0);
       servo.SetDegree(100);
       Sleep(1.0);
       turn_left(motor_percent, 2);
   }
 
}
}
}
