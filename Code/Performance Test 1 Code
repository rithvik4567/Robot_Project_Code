Performance Test 1 Code â€“ Jukebox
The code we used for performance test 1 is shown below.

The goal of this code is for the robot to recognize that the starting light was turned on and to then proceed to make its way towards the jukebox light.
Once the jukebox light was reached the robot would then use the CdS cell to process what light was shining on the floor in front of the jukebox and press 
the corresponding color on the jukebox. The robot would then back up and proceed to make its way up the ramp and then the program would terminate.

#include <FEHLCD.h>
#include <FEHIO.h>
#include <FEHUtility.h>
#include <FEHMotor.h>
#include <FEHRPS.h>
 
//Declarations for encoders & motors
DigitalEncoder right_encoder(FEHIO::P0_0);
DigitalEncoder left_encoder(FEHIO::P1_0);
FEHMotor right_motor(FEHMotor::Motor0,9.0);
FEHMotor left_motor(FEHMotor::Motor1,9.0);
//Declaration for CdS cell
AnalogInputPin lightSensor(FEHIO::P2_0);
 
void move_forward(int percent, int inches) //using encoders
{
 //convert inches to counts
   int counts = inches * 40.5;
 //Reset encoder counts
 right_encoder.ResetCounts();
 left_encoder.ResetCounts();
 
 //Set both motors to desired percent
 right_motor.SetPercent(-1 * (percent + 5));
 left_motor.SetPercent(percent);
 
 //While the average of the left and right encoder is less than counts,
 //keep running motors
 while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);
 
 //Turn off motors
 right_motor.Stop();
 left_motor.Stop();
}
 
void move_backward(int percent, int inches) //using encoders
{
 //convert inches to counts
   int counts = inches * 40.5;
 //Reset encoder counts
 right_encoder.ResetCounts();
 left_encoder.ResetCounts();
 
 //Set both motors to desired percent
 right_motor.SetPercent(-1 * (percent - 5));
 left_motor.SetPercent(percent);
 
 //While the average of the left and right encoder is less than counts,
 //keep running motors
 while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);
 
 //Turn off motors
 right_motor.Stop();
 left_motor.Stop();
}
 
void turn_right(int percent, int degrees) //using encoders
{
 //Reset encoder counts
 right_encoder.ResetCounts();
 left_encoder.ResetCounts();
 
 //Convert counts to degrees
 int counts = (degrees * 225) / 90;
 
 //Set both motors to desired percent
 //hint: set right motor backwards, left motor forwards
 
 right_motor.SetPercent(percent + 5);
 left_motor.SetPercent(percent);
 
 //While the average of the left and right encoder is less than counts,
 //keep running motors
 
 while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);
 
 
 //Turn off motors
 right_motor.Stop();
 left_motor.Stop();
}
 
void turn_left(int percent, int degrees) //using encoders
{
 //Reset encoder counts
 right_encoder.ResetCounts();
 left_encoder.ResetCounts();
 
 //Convert counts to degrees
 int counts = (degrees * 225) / 90;
 
 //Set both motors to desired percent
 
 right_motor.SetPercent(-1*(percent + 5));
 left_motor.SetPercent(-1*percent);
 
 //While the average of the left and right encoder is less than counts,
 //keep running motors
 
 while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);
 
 //Turn off motors
 right_motor.Stop();
 left_motor.Stop();
}
 
void up_ramp(int percent, int inches)
{
  //Convert inches to counts
  int counts = inches * 40.5;
  //Reset encoder counts
  right_encoder.ResetCounts();
  left_encoder.ResetCounts();
  //Set both motors to desired percent
  right_motor.SetPercent(-1 * (percent + 7));
  left_motor.SetPercent(percent);
  //While the average of the left and right encoder is less than counts,
  //keep running motors
  while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);
  //Turn off motors
  right_motor.Stop();
  left_motor.Stop();
}
 
int main(void)
{
  //Declaring the variables for the motor power percentages and initializing them
  int motor_percent = 25;
  int negative_motor_percent = -25;
 
  while (true){
  //Continuously checking to see if the light is turned on
  if (lightSensor.Value() < 2.7){
      LCD.Write(lightSensor.Value());
      //Driving forward slightly more than 11.5 inches
      move_forward(motor_percent, 11.5);
      //Turning left about 37 degrees
      Sleep(0.25);
      turn_left(motor_percent, 37);
      //Driving forward 8.5 inches
      move_forward(motor_percent, 8.5);
      //Turning left about 90 degrees
      //turn_left(motor_percent, 90);
      //Checking to see if the blue or red light is on
          if (lightSensor.Value() > 1){
              //Move backwards 2 inches
              LCD.Write(lightSensor.Value());
              LCD.Write("blue");
              Sleep(1.0);
             // move_backward(negative_motor_percent,1);
              //Turning left about 90 degrees if the blue light is on
              Sleep(0.25);
              turn_left(motor_percent, 90);
              //Driving forward 4 inches
              move_forward(motor_percent, 3);
              //Turning right about 90 degrees
              //turn_right(motor_percent, 90);
              //Driving forward 4 inches to hit the button
              //move_forward(motor_percent, 4);
              //Driving backward 4 inches
              Sleep(2.0);
              move_backward(negative_motor_percent, 4);
              //Turning left about 90 degrees
              Sleep(0.25);
              turn_left(motor_percent, 85);
              //Driving forward 3 inches
              move_forward(motor_percent, 3.5);
              //Turning left about 90 degrees
              Sleep(0.25);
              turn_left(motor_percent, 85);
              //Driving forward toward the ramp
              move_forward(motor_percent, 2);
              //Driving up the ramp
              up_ramp(motor_percent, 20);
              move_forward(motor_percent,10);
              turn_right(motor_percent,190);
              move_forward(motor_percent,25);
              break;
          } else {
              //Go forward 4 inches
              LCD.Write(lightSensor.Value());
              LCD.Write("red");
               Sleep(1.0);
               move_forward(motor_percent,4);
               //Turning left about 90 degrees if the red light is on
               Sleep(0.25);
              turn_left(motor_percent, 90);
              //Driving forward 4 inches
              move_forward(motor_percent, 3);
              //Turning left about 90 degrees
              //turn_left(motor_percent, 90);
              //Driving forward 4 inches to hit the button
              //move_forward(motor_percent, 4);
              //Driving backward 4 inches
              Sleep(2.0);
              move_backward(negative_motor_percent, 4);
              //Turning left about 90 degrees
              Sleep(0.25);
              turn_left(motor_percent, 85);
              //Driving forward 10 inches
              move_forward(motor_percent, 10.5);
              //Turning left about 90 degrees
              Sleep(0.25);
              turn_left(motor_percent, 85);
              //Driving forward toward the ramp
              move_forward(motor_percent, 2);
              //Driving up the ramp
              up_ramp(motor_percent, 20);
              move_forward(motor_percent,10);
              turn_right(motor_percent,185);
              move_forward(motor_percent,25);
              break;
          }
 
 
  }
 
  }
}
